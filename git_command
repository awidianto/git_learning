# to config basic setup
git config --global user.name <your_name>                   # --> setup your name
git config --global user.email <your_email>                 # --> setup your email
git config --global core.editor <your_editor>               # --> setup editor of your choice

# to see current basic config
git config user.name                                        # --> see current user's name who makes the commits
git config user.email                                       # --> see current user's email
git config core.editor                                      # --> see current editor of your choice

# to check git status in a certain directory. NOTE: ALWAYS CHECK STATUS BEFORE CREATE A REPOSITORY
git status

# to create a repository in a desired directory
git init

# to add files we want to commit
git add file<1> file<2> ... file<n>                         # --> stage one or more newly created/modified files separately by mentioned them one-by-one
git add .                                                   # --> stage all newly created/modified files simultaneously

# to commit files we've added
git commit -m "commit message here..."                      # this will commit staged files and input your commit message in terminal
git commit                                                  # this will open an editor, i.e. vim, and input your commit message there

# to review what has been commited
git log
git log --pretty --format=<available_format>                # --> simplicity output by using a defined format
git log --abbrev-commit                                     # --> only show a uniq, prefix commit object name
git log --oneline                                           # --> combine --pretty and --abbrev-commit together

# to undo/restore action taken
git restore file<1> ... file<n>                             # --> discard changes in working directory
git restore --staged file<1> ... file<n>                    # --> unstage files stagged simultaneously
git commit --amend                                          # --> redo the most recent commit when you make some mistake

# to list existing branches
git branch

# to create a new branch, without switching/checking out to it
git branch <branch_name>

# to move to another existing branch
git switch <branch_name>
git checkout <branch_name>

# to create a new branch and then switching/checking out to it
git switch -c <branch_name>
git checkout -B <branch_name>

# possible issues that may come when you switch to another branch while the WORKING TREE IS NOT CLEAN
1. git will not let you to move to another branch if there is a modified existing file in the working tree
2. git will let you to mvoe to another branch even if the working tree is not clean, but it only contains of untracked files

# to make git ignores unwanted-to-track files
mkdir <root_working_dir>/.gitignore                         # --> root is where .git is found
vim ./.gitignore                                            # --> add files you don't want to be tracked
